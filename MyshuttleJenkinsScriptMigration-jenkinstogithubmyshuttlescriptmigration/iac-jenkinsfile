pipeline {
    agent { node { label 'master' } }    
    
	stages {
	    stage('Infra creation') {
		    when {
		        expression { params.infra == 'create'}
		    }
		    stages {
                stage('init - Plan') {
                    steps {
			            withCredentials([string(credentialsId: 'key', variable: 'key'),
				        string(credentialsId: 'storage_account_name', variable: 'storage_account_name'),
				        string(credentialsId: 'access_key', variable: 'access_key'),
				        string(credentialsId: 'resource_group_name', variable: 'resource_group_name')]) {
			            dir ("${WORKSPACE}/terraform"){
                            sh '''
				               /usr/bin/terraform init  -backend-config="storage_account_name=${storage_account_name}" -backend-config="container_name=test-tfstate" -backend-config="access_key=${access_key}" -backend-config="resource_group_name=${resource_group_name}" -backend-config="key=${key}"
                            '''
                        }
				        }
			        }
                }
		
		        stage('terraform validate') {
                    steps {
                        dir ("${WORKSPACE}/terraform"){
                            sh ''' /usr/bin/terraform validate '''
                        }
                    }
                }
		
		        stage('test-plan') {
                    steps {
			            withCredentials([string(credentialsId: 'appId', variable: 'appId'),
				        string(credentialsId: 'password', variable: 'password')]) {
			                dir ("${WORKSPACE}/terraform"){
                                sh '''
					              /usr/bin/terraform plan -out=tfplan -input=false -var "appId=${appId}" \
					              -var "password=${password}" \
                                '''
                            }
				        }
                    }
                }
		
		        /*stage('terraform plan') {
                    steps {
			            dir ("${WORKSPACE}/terraform"){
                            sh ''' /usr/bin/terraform plan -out=tfplan -input=false -var 'resource-groupname=$(resource-groupname)' \
				                -var "cluster-name=${cluster-name}" \
					            -var "env-name=${env-name}" \
					            -var "appId=${appId}" \
					            -var "password=${password}" \
				            '''
				        }
                    }
                }*/
		
	            /*stage('approve') {
                    steps {
                        input 'Do you approve deployment?'
                    }
                }*/

                stage('Apply') {
                    steps {
			            dir ("${WORKSPACE}/terraform"){
                            sh '''/usr/bin/terraform apply -input=false tfplan '''
				        }
                    }
                }
            }
		}//MAIN STATE1
		stage('infra Destroy') {
		    when {
		        expression { params.infra == 'destroy'}
		    }
            steps {
			    withCredentials([string(credentialsId: 'appId', variable: 'appId'),
				string(credentialsId: 'password', variable: 'password')]) {
			    dir ("${WORKSPACE}/terraform"){
                    sh '''/usr/bin/terraform destroy -auto-approve -var "appId=${appId}" \
					    -var "password=${password}"   
					'''
				}
				}
            }
        }//main stage 2    
	}
}
